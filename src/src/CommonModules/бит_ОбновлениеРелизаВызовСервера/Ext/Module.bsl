// BSLLS:CommonModuleInvalidType-off
// BSLLS:PairingBrokenTransaction-off 
// BSLLS:BeginTransactionBeforeTryCatch-off

#Область ПрограммныйИнтерфейс

// Процедура вызываемая из события Приложения ПередНачаломРаботы системы
Процедура ВыполнитьОбновление() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяВерсияИБ    = Константы.бит_НомерВерсииКонфигурацииНетиповой.Получить();
	ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	ПервыйЗапуск = (Не ЗначениеЗаполнено(ТекущаяВерсияИБ));
		
	// Вызов функций заполнения данных для пустой информационной базы
	Если ПервыйЗапуск Тогда
		
		ТекущаяВерсияИБ    = "1.0.0.0";
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	    Константы.бит_НомерВерсииКонфигурацииНетиповой.Установить(ТекущаяВерсияИБ);
		
	КонецЕсли;
	
	// BSLLS:CommentedCode-off
	// ПРИМЕР:
	// НоваяВерсияИБ = "1.0.0.1"; 
	// Если РелизБолееРанний(ТекущаяВерсияИБ, НоваяВерсияИБ) Тогда
		
	// 	НачатьТранзакцию(); // Начало транзакции обновления
	//	Здесь пишем код выполняемый при этой итерации загрузки релиза 
	// 	ЗавершитьТранзакциюОбновленияИБ(НоваяВерсияИБ); // Завершение транзакции
		
	// КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииОбновления

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры:
//  НомерВерсии  - Строка - полный номер версии
//
// Возвращаемое значение:
//  Строка - номер релиза без номера сборки.
//
Функция ПолучитьНомерРелиза(НомерВерсии)
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для счетчик = 1 По СтрДлина(НомерВерсии) Цикл
		
		Если Сред(НомерВерсии, счетчик, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = счетчик - 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()

Функция РелизБолееРанний(РелизПроверяемый, РелизПроверяющий) // BSLLS:UnusedLocalMethod-off
	
	мсРелизПроверяемый = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(РелизПроверяемый, ".");
	мсРелизПроверяющий = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(РелизПроверяющий, ".");
	
	чПроверяемый = 0;
	чПроверяющий = 0;
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	Попытка
		
		Для Каждого Элемент Из мсРелизПроверяемый Цикл
			чПроверяемый = чПроверяемый * 100 + ОписаниеТипаЧисло.ПривестиЗначение(Элемент);
		КонецЦикла;
		
		Для Каждого Элемент Из мсРелизПроверяющий Цикл
			чПроверяющий = чПроверяющий * 100 + ОписаниеТипаЧисло.ПривестиЗначение(Элемент);
		КонецЦикла;
		
		Возврат чПроверяемый < чПроверяющий;
		
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура ЗавершитьТранзакциюОбновленияИБ(НоваяВерсияИБ) // BSLLS:UnusedLocalMethod-off
	
	ТекущаяВерсияИБ = Константы.бит_НомерВерсииКонфигурацииНетиповой.Получить();
	Константы.бит_НомерВерсииКонфигурацииНетиповой.Установить(НоваяВерсияИБ);
	
	// BSLLS:CommitTransactionOutsideTryCatch-off
	ЗафиксироватьТранзакцию(); 
	
	Если Константы.бит_НомерВерсииКонфигурацииНетиповой.Получить() = НоваяВерсияИБ Тогда
		
		// Если удалось зафиксировать транзакцию, то
		// сообщение об успешном обновлении информационной базы.
		ШаблонСообщения = "Выполнено нетиповое обновление информационной базы с версии %1 на версию %2";
		Сообщение = СтрШаблон(ШаблонСообщения, ТекущаяВерсияИБ, НоваяВерсияИБ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти