
#Область ОбщиеПроцедурыИФункцииОбновления

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки.
//
Функция ПолучитьНомерРелиза(НомерВерсии)
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для счетчик = 1 По СтрДлина(НомерВерсии) Цикл
		
		Если Сред(НомерВерсии, счетчик, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = счетчик - 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()

Функция РелизБолееРанний(РелизПроверяемый,РелизПроверяющий)
	
	мсРелизПроверяемый = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(РелизПроверяемый,".");
	мсРелизПроверяющий = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(РелизПроверяющий,".");
	
	чПроверяемый = 0;
	чПроверяющий = 0;
	
	Попытка
		
		Для Каждого Элемент Из мсРелизПроверяемый Цикл
			чПроверяемый = чПроверяемый * 100 + Число(Элемент)
		КонецЦикла;
		Для Каждого Элемент Из мсРелизПроверяющий Цикл
			чПроверяющий = чПроверяющий * 100 + Число(Элемент)
		КонецЦикла;
		
		Возврат чПроверяемый < чПроверяющий;
		
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ВыполнитьОбновление() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяВерсияИБ    = Константы.бит_НомерВерсииКонфигурацииНетиповой.Получить();
	ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	ПервыйЗапуск = (Не ЗначениеЗаполнено(ТекущаяВерсияИБ));
		
	// Вызов функций заполнения данных для пустой информационной базы
	Если ПервыйЗапуск Тогда
		
		ТекущаяВерсияИБ    = "1.0.0.0";
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	    Константы.бит_НомерВерсииКонфигурацииНетиповой.Установить(ТекущаяВерсияИБ);
		
	КонецЕсли;
	
	НоваяВерсияИБ ="1.0.0.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ, НоваяВерсияИБ) Тогда
		
		НачатьТранзакцию(); // Начало транзакции обновления
		ЗаполнитьНастройкиУчетаПоУмолчанию();
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьНастройкиУчетаПоУмолчанию()
	
	//ПРИМЕР как можно заполнить настройки учета по умолчанию при первом запуске
	//Пишем правила обмена на КД 2, где указываем только нужные справочники для начального заполнения
	//Выгружаем данные этими правилами из настроенной базы
	//Загружаем выгруженный файл в макет конфигурации
	//ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выполняется первоначальное заполнение настроек учета'"));
	//ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.бит_НастройкиУчета.ПолучитьМакет("ПервоначальноеЗаполнение"));
	
КонецПроцедуры

Процедура ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ)
	
	ТекущаяВерсияИБ = Константы.бит_НомерВерсииКонфигурацииНетиповой.Получить();
	Константы.бит_НомерВерсииКонфигурацииНетиповой.Установить(НоваяВерсияИБ);
	
	ЗафиксироватьТранзакцию();
	
	Если Константы.бит_НомерВерсииКонфигурацииНетиповой.Получить() = НоваяВерсияИБ Тогда
		
		// Если удалось зафиксировать транзакцию, то
		// сообщение об успешном обновлении информационной базы.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено нетиповое обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДополнительныеКодыДиагнозов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Диагнозы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Диагнозы КАК Диагнозы
	|ГДЕ
	|	НЕ Диагнозы.ЭтоГруппа
	|	И (Диагнозы.КодДиагноза ПОДОБНО ""%*""
	|			ИЛИ Диагнозы.КодДиагноза ПОДОБНО ""%+"")";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Выборка.Ссылка.ПолучитьОбъект().Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствияСтрокРегОтчетностиФормы12()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Диагнозы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.Диагнозы КАК Диагнозы";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДиагнозыНЗ = РегистрыСведений.Диагнозы.СоздатьНаборЗаписей();
		ДиагнозыНЗ.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ДиагнозыНЗ.Прочитать();
		ДиагнозыНЗ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

